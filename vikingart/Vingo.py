# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.2.4

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class Vingo:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "Vingo"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("Vingo")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(
        self,
        name: str,
        symbol: str,
        beneficiary: ChecksumAddress,
        royalty_receiver: ChecksumAddress,
        transaction_config,
    ):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(
            name, symbol, beneficiary, royalty_receiver, transaction_config
        )
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def approve(self, to: ChecksumAddress, token_id: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.approve(to, token_id, transaction_config)

    def balance_of(
        self, owner: ChecksumAddress, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.balanceOf.call(owner, block_identifier=block_number)

    def base_token_uri(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.baseTokenURI.call(block_identifier=block_number)

    def beneficiary(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.beneficiary.call(block_identifier=block_number)

    def buy(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.buy(transaction_config)

    def cost(
        self, n: int, arg1: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.cost.call(n, arg1, block_identifier=block_number)

    def get_approved(
        self, token_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getApproved.call(token_id, block_identifier=block_number)

    def is_approved_for_all(
        self,
        owner: ChecksumAddress,
        operator: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.isApprovedForAll.call(
            owner, operator, block_identifier=block_number
        )

    def make_an_epic_nft(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.makeAnEpicNFT(transaction_config)

    def name(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.name.call(block_identifier=block_number)

    def owner(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call(block_identifier=block_number)

    def owner_of(
        self, token_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.ownerOf.call(token_id, block_identifier=block_number)

    def pause(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.pause(transaction_config)

    def paused(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.paused.call(block_identifier=block_number)

    def price(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.price.call(block_identifier=block_number)

    def purchase_free_of_charge(
        self, to: ChecksumAddress, n: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.purchaseFreeOfCharge(to, n, transaction_config)

    def renounce_ownership(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.renounceOwnership(transaction_config)

    def royalty_info(
        self,
        _token_id: int,
        _sale_price: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.royaltyInfo.call(
            _token_id, _sale_price, block_identifier=block_number
        )

    def safe_transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        token_id: int,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.safeTransferFrom(from_, to, token_id, transaction_config)

    def safe_transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        token_id: int,
        _data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.safeTransferFrom(
            from_, to, token_id, _data, transaction_config
        )

    def seller_config(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.sellerConfig.call(block_identifier=block_number)

    def set_approval_for_all(
        self, operator: ChecksumAddress, approved: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setApprovalForAll(operator, approved, transaction_config)

    def set_base_token_uri(self, base_token_uri_: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setBaseTokenURI(base_token_uri_, transaction_config)

    def set_beneficiary(self, _beneficiary: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setBeneficiary(_beneficiary, transaction_config)

    def set_price(self, _price: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPrice(_price, transaction_config)

    def set_royalty_info(
        self, receiver: ChecksumAddress, fee_basis_points: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setRoyaltyInfo(
            receiver, fee_basis_points, transaction_config
        )

    def set_seller_config(self, config: Any, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setSellerConfig(config, transaction_config)

    def supports_interface(
        self, interface_id: bytes, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(
            interface_id, block_identifier=block_number
        )

    def symbol(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.symbol.call(block_identifier=block_number)

    def token_uri(
        self, token_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.tokenURI.call(token_id, block_identifier=block_number)

    def total_sold(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.totalSold.call(block_identifier=block_number)

    def total_supply(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.totalSupply.call(block_identifier=block_number)

    def transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        token_id: int,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferFrom(from_, to, token_id, transaction_config)

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)

    def unpause(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.unpause(transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = Vingo(None)
    result = contract.deploy(
        name=args.name,
        symbol=args.symbol,
        beneficiary=args.beneficiary,
        royalty_receiver=args.royalty_receiver,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.verify_contract()
    print(result)


def handle_approve(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.approve(
        to=args.to, token_id=args.token_id, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_balance_of(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.balance_of(owner=args.owner, block_number=args.block_number)
    print(result)


def handle_base_token_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.base_token_uri(block_number=args.block_number)
    print(result)


def handle_beneficiary(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.beneficiary(block_number=args.block_number)
    print(result)


def handle_buy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.buy(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_cost(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.cost(n=args.n, arg1=args.arg1, block_number=args.block_number)
    print(result)


def handle_get_approved(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.get_approved(
        token_id=args.token_id, block_number=args.block_number
    )
    print(result)


def handle_is_approved_for_all(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.is_approved_for_all(
        owner=args.owner, operator=args.operator, block_number=args.block_number
    )
    print(result)


def handle_make_an_epic_nft(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.make_an_epic_nft(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_name(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.name(block_number=args.block_number)
    print(result)


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.owner(block_number=args.block_number)
    print(result)


def handle_owner_of(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.owner_of(token_id=args.token_id, block_number=args.block_number)
    print(result)


def handle_pause(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.pause(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_paused(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.paused(block_number=args.block_number)
    print(result)


def handle_price(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.price(block_number=args.block_number)
    print(result)


def handle_purchase_free_of_charge(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.purchase_free_of_charge(
        to=args.to, n=args.n, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_renounce_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.renounce_ownership(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_royalty_info(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.royalty_info(
        _token_id=args.token_id_arg,
        _sale_price=args.sale_price_arg,
        block_number=args.block_number,
    )
    print(result)


def handle_safe_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.safe_transfer_from(
        from_=args.from_arg,
        to=args.to,
        token_id=args.token_id,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_safe_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.safe_transfer_from(
        from_=args.from_arg,
        to=args.to,
        token_id=args.token_id,
        _data=args.data_arg,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_seller_config(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.seller_config(block_number=args.block_number)
    print(result)


def handle_set_approval_for_all(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_approval_for_all(
        operator=args.operator,
        approved=args.approved,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_base_token_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_base_token_uri(
        base_token_uri_=args.base_token_uri_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_beneficiary(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_beneficiary(
        _beneficiary=args.beneficiary_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_price(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_price(
        _price=args.price_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_royalty_info(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_royalty_info(
        receiver=args.receiver,
        fee_basis_points=args.fee_basis_points,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_seller_config(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_seller_config(
        config=args.config, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.supports_interface(
        interface_id=args.interface_id, block_number=args.block_number
    )
    print(result)


def handle_symbol(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.symbol(block_number=args.block_number)
    print(result)


def handle_token_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.token_uri(token_id=args.token_id, block_number=args.block_number)
    print(result)


def handle_total_sold(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.total_sold(block_number=args.block_number)
    print(result)


def handle_total_supply(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    result = contract.total_supply(block_number=args.block_number)
    print(result)


def handle_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_from(
        from_=args.from_arg,
        to=args.to,
        token_id=args.token_id,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_unpause(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Vingo(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.unpause(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for Vingo")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.add_argument("--name", required=True, help="Type: string", type=str)
    deploy_parser.add_argument("--symbol", required=True, help="Type: string", type=str)
    deploy_parser.add_argument("--beneficiary", required=True, help="Type: address")
    deploy_parser.add_argument(
        "--royalty-receiver", required=True, help="Type: address"
    )
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    approve_parser = subcommands.add_parser("approve")
    add_default_arguments(approve_parser, True)
    approve_parser.add_argument("--to", required=True, help="Type: address")
    approve_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    approve_parser.set_defaults(func=handle_approve)

    balance_of_parser = subcommands.add_parser("balance-of")
    add_default_arguments(balance_of_parser, False)
    balance_of_parser.add_argument("--owner", required=True, help="Type: address")
    balance_of_parser.set_defaults(func=handle_balance_of)

    base_token_uri_parser = subcommands.add_parser("base-token-uri")
    add_default_arguments(base_token_uri_parser, False)
    base_token_uri_parser.set_defaults(func=handle_base_token_uri)

    beneficiary_parser = subcommands.add_parser("beneficiary")
    add_default_arguments(beneficiary_parser, False)
    beneficiary_parser.set_defaults(func=handle_beneficiary)

    buy_parser = subcommands.add_parser("buy")
    add_default_arguments(buy_parser, True)
    buy_parser.set_defaults(func=handle_buy)

    cost_parser = subcommands.add_parser("cost")
    add_default_arguments(cost_parser, False)
    cost_parser.add_argument("--n", required=True, help="Type: uint256", type=int)
    cost_parser.add_argument("--arg1", required=True, help="Type: uint256", type=int)
    cost_parser.set_defaults(func=handle_cost)

    get_approved_parser = subcommands.add_parser("get-approved")
    add_default_arguments(get_approved_parser, False)
    get_approved_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    get_approved_parser.set_defaults(func=handle_get_approved)

    is_approved_for_all_parser = subcommands.add_parser("is-approved-for-all")
    add_default_arguments(is_approved_for_all_parser, False)
    is_approved_for_all_parser.add_argument(
        "--owner", required=True, help="Type: address"
    )
    is_approved_for_all_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    is_approved_for_all_parser.set_defaults(func=handle_is_approved_for_all)

    make_an_epic_nft_parser = subcommands.add_parser("make-an-epic-nft")
    add_default_arguments(make_an_epic_nft_parser, True)
    make_an_epic_nft_parser.set_defaults(func=handle_make_an_epic_nft)

    name_parser = subcommands.add_parser("name")
    add_default_arguments(name_parser, False)
    name_parser.set_defaults(func=handle_name)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    owner_of_parser = subcommands.add_parser("owner-of")
    add_default_arguments(owner_of_parser, False)
    owner_of_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    owner_of_parser.set_defaults(func=handle_owner_of)

    pause_parser = subcommands.add_parser("pause")
    add_default_arguments(pause_parser, True)
    pause_parser.set_defaults(func=handle_pause)

    paused_parser = subcommands.add_parser("paused")
    add_default_arguments(paused_parser, False)
    paused_parser.set_defaults(func=handle_paused)

    price_parser = subcommands.add_parser("price")
    add_default_arguments(price_parser, False)
    price_parser.set_defaults(func=handle_price)

    purchase_free_of_charge_parser = subcommands.add_parser("purchase-free-of-charge")
    add_default_arguments(purchase_free_of_charge_parser, True)
    purchase_free_of_charge_parser.add_argument(
        "--to", required=True, help="Type: address"
    )
    purchase_free_of_charge_parser.add_argument(
        "--n", required=True, help="Type: uint256", type=int
    )
    purchase_free_of_charge_parser.set_defaults(func=handle_purchase_free_of_charge)

    renounce_ownership_parser = subcommands.add_parser("renounce-ownership")
    add_default_arguments(renounce_ownership_parser, True)
    renounce_ownership_parser.set_defaults(func=handle_renounce_ownership)

    royalty_info_parser = subcommands.add_parser("royalty-info")
    add_default_arguments(royalty_info_parser, False)
    royalty_info_parser.add_argument(
        "--token-id-arg", required=True, help="Type: uint256", type=int
    )
    royalty_info_parser.add_argument(
        "--sale-price-arg", required=True, help="Type: uint256", type=int
    )
    royalty_info_parser.set_defaults(func=handle_royalty_info)

    safe_transfer_from_parser = subcommands.add_parser("safe-transfer-from")
    add_default_arguments(safe_transfer_from_parser, True)
    safe_transfer_from_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    safe_transfer_from_parser.add_argument("--to", required=True, help="Type: address")
    safe_transfer_from_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    safe_transfer_from_parser.set_defaults(func=handle_safe_transfer_from)

    safe_transfer_from_parser = subcommands.add_parser("safe-transfer-from")
    add_default_arguments(safe_transfer_from_parser, True)
    safe_transfer_from_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    safe_transfer_from_parser.add_argument("--to", required=True, help="Type: address")
    safe_transfer_from_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    safe_transfer_from_parser.add_argument(
        "--data-arg", required=True, help="Type: bytes", type=bytes_argument_type
    )
    safe_transfer_from_parser.set_defaults(func=handle_safe_transfer_from)

    seller_config_parser = subcommands.add_parser("seller-config")
    add_default_arguments(seller_config_parser, False)
    seller_config_parser.set_defaults(func=handle_seller_config)

    set_approval_for_all_parser = subcommands.add_parser("set-approval-for-all")
    add_default_arguments(set_approval_for_all_parser, True)
    set_approval_for_all_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    set_approval_for_all_parser.add_argument(
        "--approved", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_approval_for_all_parser.set_defaults(func=handle_set_approval_for_all)

    set_base_token_uri_parser = subcommands.add_parser("set-base-token-uri")
    add_default_arguments(set_base_token_uri_parser, True)
    set_base_token_uri_parser.add_argument(
        "--base-token-uri-arg", required=True, help="Type: string", type=str
    )
    set_base_token_uri_parser.set_defaults(func=handle_set_base_token_uri)

    set_beneficiary_parser = subcommands.add_parser("set-beneficiary")
    add_default_arguments(set_beneficiary_parser, True)
    set_beneficiary_parser.add_argument(
        "--beneficiary-arg", required=True, help="Type: address"
    )
    set_beneficiary_parser.set_defaults(func=handle_set_beneficiary)

    set_price_parser = subcommands.add_parser("set-price")
    add_default_arguments(set_price_parser, True)
    set_price_parser.add_argument(
        "--price-arg", required=True, help="Type: uint256", type=int
    )
    set_price_parser.set_defaults(func=handle_set_price)

    set_royalty_info_parser = subcommands.add_parser("set-royalty-info")
    add_default_arguments(set_royalty_info_parser, True)
    set_royalty_info_parser.add_argument(
        "--receiver", required=True, help="Type: address"
    )
    set_royalty_info_parser.add_argument(
        "--fee-basis-points", required=True, help="Type: uint96", type=int
    )
    set_royalty_info_parser.set_defaults(func=handle_set_royalty_info)

    set_seller_config_parser = subcommands.add_parser("set-seller-config")
    add_default_arguments(set_seller_config_parser, True)
    set_seller_config_parser.add_argument("--config", required=True, help="Type: tuple")
    set_seller_config_parser.set_defaults(func=handle_set_seller_config)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    symbol_parser = subcommands.add_parser("symbol")
    add_default_arguments(symbol_parser, False)
    symbol_parser.set_defaults(func=handle_symbol)

    token_uri_parser = subcommands.add_parser("token-uri")
    add_default_arguments(token_uri_parser, False)
    token_uri_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    token_uri_parser.set_defaults(func=handle_token_uri)

    total_sold_parser = subcommands.add_parser("total-sold")
    add_default_arguments(total_sold_parser, False)
    total_sold_parser.set_defaults(func=handle_total_sold)

    total_supply_parser = subcommands.add_parser("total-supply")
    add_default_arguments(total_supply_parser, False)
    total_supply_parser.set_defaults(func=handle_total_supply)

    transfer_from_parser = subcommands.add_parser("transfer-from")
    add_default_arguments(transfer_from_parser, True)
    transfer_from_parser.add_argument("--from-arg", required=True, help="Type: address")
    transfer_from_parser.add_argument("--to", required=True, help="Type: address")
    transfer_from_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    transfer_from_parser.set_defaults(func=handle_transfer_from)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    unpause_parser = subcommands.add_parser("unpause")
    add_default_arguments(unpause_parser, True)
    unpause_parser.set_defaults(func=handle_unpause)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
